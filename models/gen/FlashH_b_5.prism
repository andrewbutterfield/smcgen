dtmc

const int b=5; // Block Count: Our problematic parameter
const int p; // Pages per Block
const int c; // Number of page writes between wear levelling
const int w; // Maximum wear tolerance (no. of erasures)
const int MAXDIFF; // Maximum desired difference in wear across blocks.

// control flow
const int INIT = 1;    // startup
const int WRITE = 2;   // page writes
const int SELECT = 3;  // wear-levelling
const int FINISH = 4;  // done: memory full or worn out

module Flash5

// fm_clean_i, for i in 1..5 - no of clean pages in block i
fm_clean_1: [0..p];
fm_clean_2: [0..p];
fm_clean_3: [0..p];
fm_clean_4: [0..p];
fm_clean_5: [0..p];
// fm_erase_i, i in 1..5, no of times block i has been erased.
fm_erase_1:[0..w];
fm_erase_2:[0..w];
fm_erase_3:[0..w];
fm_erase_4:[0..w];
fm_erase_5:[0..w];
pc: [INIT..FINISH] init INIT; // program counter
i: [0..c] init 0; // number of writes done since last wear-levelling.

// Step 1
[] pc=INIT ->
  (fm_clean_1'=p) &
  (fm_clean_2'=p) &
  (fm_clean_3'=p) &
  (fm_clean_4'=p) &
  (fm_clean_5'=p) &
  (fm_erase_1'=p) &
  (fm_erase_2'=p) &
  (fm_erase_3'=p) &
  (fm_erase_4'=p) &
  (fm_erase_5'=p) &
  (pc'=WRITE);

// Step 2
[] pc=WRITE & i<c & writeable!=0 ->
  (fm_clean_1>0?1/writeable:0): (fm_clean_1'=fm_clean_1-1) & (i'=i+1) +
  (fm_clean_2>0?1/writeable:0): (fm_clean_2'=fm_clean_2-1) & (i'=i+1) +
  (fm_clean_3>0?1/writeable:0): (fm_clean_3'=fm_clean_3-1) & (i'=i+1) +
  (fm_clean_4>0?1/writeable:0): (fm_clean_4'=fm_clean_4-1) & (i'=i+1) +
  (fm_clean_5>0?1/writeable:0): (fm_clean_5'=fm_clean_5-1) & (i'=i+1);

// Step 3
[] pc=WRITE & i<c & writeable=0 -> (pc'=FINISH);

// Step 4
[] pc=WRITE & i=c -> (pc'=SELECT);

// Step 5
[] pc=SELECT & (candidates=0 | !can_erase) -> (pc'=FINISH);

// Step 6
[] pc=SELECT & candidates!=0 & can_erase ->
  (cand_1_2 ? 1/candidates : 0): (fm_clean_2'=fm_clean_2-dirty_1) &
                                 (fm_clean_1'=p) & (fm_erase_1'=fm_erase_1+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_1_3 ? 1/candidates : 0): (fm_clean_3'=fm_clean_3-dirty_1) &
                                 (fm_clean_1'=p) & (fm_erase_1'=fm_erase_1+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_1_4 ? 1/candidates : 0): (fm_clean_4'=fm_clean_4-dirty_1) &
                                 (fm_clean_1'=p) & (fm_erase_1'=fm_erase_1+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_1_5 ? 1/candidates : 0): (fm_clean_5'=fm_clean_5-dirty_1) &
                                 (fm_clean_1'=p) & (fm_erase_1'=fm_erase_1+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_2_1 ? 1/candidates : 0): (fm_clean_1'=fm_clean_1-dirty_2) &
                                 (fm_clean_2'=p) & (fm_erase_2'=fm_erase_2+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_2_3 ? 1/candidates : 0): (fm_clean_3'=fm_clean_3-dirty_2) &
                                 (fm_clean_2'=p) & (fm_erase_2'=fm_erase_2+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_2_4 ? 1/candidates : 0): (fm_clean_4'=fm_clean_4-dirty_2) &
                                 (fm_clean_2'=p) & (fm_erase_2'=fm_erase_2+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_2_5 ? 1/candidates : 0): (fm_clean_5'=fm_clean_5-dirty_2) &
                                 (fm_clean_2'=p) & (fm_erase_2'=fm_erase_2+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_3_1 ? 1/candidates : 0): (fm_clean_1'=fm_clean_1-dirty_3) &
                                 (fm_clean_3'=p) & (fm_erase_3'=fm_erase_3+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_3_2 ? 1/candidates : 0): (fm_clean_2'=fm_clean_2-dirty_3) &
                                 (fm_clean_3'=p) & (fm_erase_3'=fm_erase_3+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_3_4 ? 1/candidates : 0): (fm_clean_4'=fm_clean_4-dirty_3) &
                                 (fm_clean_3'=p) & (fm_erase_3'=fm_erase_3+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_3_5 ? 1/candidates : 0): (fm_clean_5'=fm_clean_5-dirty_3) &
                                 (fm_clean_3'=p) & (fm_erase_3'=fm_erase_3+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_4_1 ? 1/candidates : 0): (fm_clean_1'=fm_clean_1-dirty_4) &
                                 (fm_clean_4'=p) & (fm_erase_4'=fm_erase_4+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_4_2 ? 1/candidates : 0): (fm_clean_2'=fm_clean_2-dirty_4) &
                                 (fm_clean_4'=p) & (fm_erase_4'=fm_erase_4+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_4_3 ? 1/candidates : 0): (fm_clean_3'=fm_clean_3-dirty_4) &
                                 (fm_clean_4'=p) & (fm_erase_4'=fm_erase_4+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_4_5 ? 1/candidates : 0): (fm_clean_5'=fm_clean_5-dirty_4) &
                                 (fm_clean_4'=p) & (fm_erase_4'=fm_erase_4+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_5_1 ? 1/candidates : 0): (fm_clean_1'=fm_clean_1-dirty_5) &
                                 (fm_clean_5'=p) & (fm_erase_5'=fm_erase_5+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_5_2 ? 1/candidates : 0): (fm_clean_2'=fm_clean_2-dirty_5) &
                                 (fm_clean_5'=p) & (fm_erase_5'=fm_erase_5+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_5_3 ? 1/candidates : 0): (fm_clean_3'=fm_clean_3-dirty_5) &
                                 (fm_clean_5'=p) & (fm_erase_5'=fm_erase_5+1) &
                                 (i'=0) & (pc'=WRITE) +
  (cand_5_4 ? 1/candidates : 0): (fm_clean_4'=fm_clean_4-dirty_5) &
                                 (fm_clean_5'=p) & (fm_erase_5'=fm_erase_5+1) &
                                 (i'=0) & (pc'=WRITE);

// Step 7
[] pc=FINISH -> true;

endmodule

// a block is writeable if it has at least one clean page
// We need to know how many of these there are.
formula writeable =
  (fm_clean_1!=0 ? 1 : 0) +
  (fm_clean_2!=0 ? 1 : 0) +
  (fm_clean_3!=0 ? 1 : 0) +
  (fm_clean_4!=0 ? 1 : 0) +
  (fm_clean_5!=0 ? 1 : 0);

// dirty_i, for i in 1..5 - number of dirty pages in block i
formula dirty_1 = p-fm_clean_1;
formula dirty_2 = p-fm_clean_2;
formula dirty_3 = p-fm_clean_3;
formula dirty_4 = p-fm_clean_4;
formula dirty_5 = p-fm_clean_5;

// cand_i_j, for i,j in 1..5, i /= j
//  block i is dirty but there is space in block j for its pages
formula cand_1_2 = dirty_1>0 & fm_clean_2 >= dirty_1;
formula cand_1_3 = dirty_1>0 & fm_clean_3 >= dirty_1;
formula cand_1_4 = dirty_1>0 & fm_clean_4 >= dirty_1;
formula cand_1_5 = dirty_1>0 & fm_clean_5 >= dirty_1;
formula cand_2_1 = dirty_2>0 & fm_clean_1 >= dirty_2;
formula cand_2_3 = dirty_2>0 & fm_clean_3 >= dirty_2;
formula cand_2_4 = dirty_2>0 & fm_clean_4 >= dirty_2;
formula cand_2_5 = dirty_2>0 & fm_clean_5 >= dirty_2;
formula cand_3_1 = dirty_3>0 & fm_clean_1 >= dirty_3;
formula cand_3_2 = dirty_3>0 & fm_clean_2 >= dirty_3;
formula cand_3_4 = dirty_3>0 & fm_clean_4 >= dirty_3;
formula cand_3_5 = dirty_3>0 & fm_clean_5 >= dirty_3;
formula cand_4_1 = dirty_4>0 & fm_clean_1 >= dirty_4;
formula cand_4_2 = dirty_4>0 & fm_clean_2 >= dirty_4;
formula cand_4_3 = dirty_4>0 & fm_clean_3 >= dirty_4;
formula cand_4_5 = dirty_4>0 & fm_clean_5 >= dirty_4;
formula cand_5_1 = dirty_5>0 & fm_clean_1 >= dirty_5;
formula cand_5_2 = dirty_5>0 & fm_clean_2 >= dirty_5;
formula cand_5_3 = dirty_5>0 & fm_clean_3 >= dirty_5;
formula cand_5_4 = dirty_5>0 & fm_clean_4 >= dirty_5;

// the number of ways in which we can relocate dirty pages from one block
// to another so we can erase (clean) the first block.
formula candidates =
  (cand_1_2?1:0) +
  (cand_1_3?1:0) +
  (cand_1_4?1:0) +
  (cand_1_5?1:0) +
  (cand_2_1?1:0) +
  (cand_2_3?1:0) +
  (cand_2_4?1:0) +
  (cand_2_5?1:0) +
  (cand_3_1?1:0) +
  (cand_3_2?1:0) +
  (cand_3_4?1:0) +
  (cand_3_5?1:0) +
  (cand_4_1?1:0) +
  (cand_4_2?1:0) +
  (cand_4_3?1:0) +
  (cand_4_5?1:0) +
  (cand_5_1?1:0) +
  (cand_5_2?1:0) +
  (cand_5_3?1:0) +
  (cand_5_4?1:0);

// true when it is still possibe to erase ANY block,
// without exceeding the maximum allowable erase operations.
formula can_erase =
  fm_erase_1<w &
  fm_erase_2<w &
  fm_erase_3<w &
  fm_erase_4<w &
  fm_erase_5<w;

// diff_i_j, for i,j in 1..5, i /= j
// the difference in number of erasure of blocks i and j
formula diff_1_2 = fm_erase_1-fm_erase_2;
formula diff_1_3 = fm_erase_1-fm_erase_3;
formula diff_1_4 = fm_erase_1-fm_erase_4;
formula diff_1_5 = fm_erase_1-fm_erase_5;
formula diff_2_1 = fm_erase_2-fm_erase_1;
formula diff_2_3 = fm_erase_2-fm_erase_3;
formula diff_2_4 = fm_erase_2-fm_erase_4;
formula diff_2_5 = fm_erase_2-fm_erase_5;
formula diff_3_1 = fm_erase_3-fm_erase_1;
formula diff_3_2 = fm_erase_3-fm_erase_2;
formula diff_3_4 = fm_erase_3-fm_erase_4;
formula diff_3_5 = fm_erase_3-fm_erase_5;
formula diff_4_1 = fm_erase_4-fm_erase_1;
formula diff_4_2 = fm_erase_4-fm_erase_2;
formula diff_4_3 = fm_erase_4-fm_erase_3;
formula diff_4_5 = fm_erase_4-fm_erase_5;
formula diff_5_1 = fm_erase_5-fm_erase_1;
formula diff_5_2 = fm_erase_5-fm_erase_2;
formula diff_5_3 = fm_erase_5-fm_erase_3;
formula diff_5_4 = fm_erase_5-fm_erase_4;

// true if difference in wear equals some limit.
formula toobig =
  diff_1_2 >= MAXDIFF |
  diff_1_3 >= MAXDIFF |
  diff_1_4 >= MAXDIFF |
  diff_1_5 >= MAXDIFF |
  diff_2_1 >= MAXDIFF |
  diff_2_3 >= MAXDIFF |
  diff_2_4 >= MAXDIFF |
  diff_2_5 >= MAXDIFF |
  diff_3_1 >= MAXDIFF |
  diff_3_2 >= MAXDIFF |
  diff_3_4 >= MAXDIFF |
  diff_3_5 >= MAXDIFF |
  diff_4_1 >= MAXDIFF |
  diff_4_2 >= MAXDIFF |
  diff_4_3 >= MAXDIFF |
  diff_4_5 >= MAXDIFF |
  diff_5_1 >= MAXDIFF |
  diff_5_2 >= MAXDIFF |
  diff_5_3 >= MAXDIFF |
  diff_5_4 >= MAXDIFF;
